version: '3.8'

services:
  # PostgreSQL for user data and metadata
  postgres:
    image: postgres:15-alpine
    container_name: skynet-rc1-postgres
    environment:
      POSTGRES_DB: skynet_rc1
      POSTGRES_USER: skynet
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - ./infrastructure/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    restart: unless-stopped

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: skynet-rc1-redis
    ports:
      - "6379:6379"
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru

  # Qdrant Vector Database
  qdrant:
    image: qdrant/qdrant:latest
    container_name: skynet-rc1-qdrant
    ports:
      - "6333:6333"
      - "6334:6334"
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334
    restart: unless-stopped

  # Frontend Service (Django)
  frontend:
    build:
      context: ./services/frontend
      dockerfile: Dockerfile
    container_name: skynet-rc1-frontend
    environment:
      - DEBUG=${DEBUG}
      - SECRET_KEY=${SECRET_KEY}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - DATABASE_URL=postgresql://skynet:${POSTGRES_PASSWORD}@postgres:5432/skynet_rc1
      - REDIS_URL=redis://redis:6379/0
      - API_GATEWAY_URL=http://gateway:8000
      - ALLOWED_HOSTS=localhost,127.0.0.1,0.0.0.0,frontend,nginx
    volumes:
      - ./services/frontend:/app
      - ./data:/app/data
    ports:
      - "8080:8000"
    depends_on:
      - postgres
      - redis
      - gateway
    restart: unless-stopped

  # API Gateway Service
  gateway:
    build:
      context: ./services/gateway
      dockerfile: Dockerfile
    container_name: skynet-rc1-gateway
    environment:
      - SECRET_KEY=${SECRET_KEY}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - DATABASE_URL=postgresql://skynet:${POSTGRES_PASSWORD}@postgres:5432/skynet_rc1
      - REDIS_URL=redis://redis:6379/1
      - DOCUMENT_SERVICE_URL=http://document:8000
      - AI_CHAT_SERVICE_URL=http://ai-chat:8000
      - FRONTEND_SERVICE_URL=http://frontend:8000
      - QDRANT_URL=http://qdrant:6333
    ports:
      - "8000:8000"
    depends_on:
      - postgres
      - redis
      - qdrant
    restart: unless-stopped

  # Simple test document service (without Ollama dependency)
  document:
    build:
      context: ./services/document
      dockerfile: Dockerfile
    container_name: skynet-rc1-document
    environment:
      - DATABASE_URL=postgresql://skynet:${POSTGRES_PASSWORD}@postgres:5432/skynet_rc1
      - REDIS_URL=redis://redis:6379/2
      - QDRANT_URL=http://qdrant:6333
      - OLLAMA_URL=http://localhost:11434
    volumes:
      - ./data:/app/data
    ports:
      - "8001:8000"
    depends_on:
      - postgres
      - redis
      - qdrant
    restart: unless-stopped

  # Simple test AI chat service (without Ollama dependency)
  ai-chat:
    build:
      context: ./services/ai-chat
      dockerfile: Dockerfile
    container_name: skynet-rc1-ai-chat
    environment:
      - DATABASE_URL=postgresql://skynet:${POSTGRES_PASSWORD}@postgres:5432/skynet_rc1
      - REDIS_URL=redis://redis:6379/3
      - QDRANT_URL=http://qdrant:6333
      - OLLAMA_URL=http://localhost:11434
      - OLLAMA_MODEL=${OLLAMA_MODEL}
    ports:
      - "8002:8000"
    depends_on:
      - postgres
      - redis
      - qdrant
    restart: unless-stopped

networks:
  default:
    name: skynet-rc1-test-network