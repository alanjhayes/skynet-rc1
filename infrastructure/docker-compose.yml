services:
  # Infrastructure Layer
  
  # Qdrant Vector Database
  qdrant:
    image: qdrant/qdrant:latest
    container_name: skynet-rc1-qdrant
    volumes:
      - qdrant_data:/qdrant/storage
    ports:
      - "6333:6333"
      - "6334:6334"
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334
    restart: unless-stopped

  # PostgreSQL for user data and metadata
  postgres:
    image: postgres:15-alpine
    container_name: skynet-rc1-postgres
    environment:
      POSTGRES_DB: skynet_rc1
      POSTGRES_USER: skynet
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    restart: unless-stopped

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: skynet-rc1-redis
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru

  # Ollama for local LLM
  ollama:
    image: ollama/ollama:latest
    container_name: skynet-rc1-ollama
    volumes:
      - ollama_data:/root/.ollama
      - ./ollama-init.sh:/usr/local/bin/ollama-init.sh
    ports:
      - "11434:11434"
    environment:
      - OLLAMA_HOST=0.0.0.0
      - OLLAMA_KEEP_ALIVE=24h
      - OLLAMA_MODEL=${OLLAMA_MODEL}
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "ollama", "list"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]

  # Ollama Model Initialization
  ollama-init:
    image: ollama/ollama:latest
    container_name: skynet-rc1-ollama-init
    environment:
      - OLLAMA_HOST=http://ollama:11434
      - OLLAMA_MODEL=${OLLAMA_MODEL}
    volumes:
      - ./ollama-init.sh:/usr/local/bin/ollama-init.sh
    entrypoint: ["sh"]
    command: ["/usr/local/bin/ollama-init.sh"]
    depends_on:
      ollama:
        condition: service_healthy
    restart: "no"

  # Microservices Layer

  # Frontend Service (Django)
  frontend:
    build:
      context: ../services/frontend
      dockerfile: Dockerfile
    container_name: skynet-rc1-frontend
    environment:
      - DEBUG=${DEBUG}
      - SECRET_KEY=${SECRET_KEY}
      - DATABASE_URL=postgresql://skynet:${POSTGRES_PASSWORD}@postgres:5432/skynet_rc1
      - REDIS_URL=redis://redis:6379/0
      - API_GATEWAY_URL=http://gateway:8000
      - ALLOWED_HOSTS=localhost,127.0.0.1,0.0.0.0,frontend,nginx
    volumes:
      - ../services/frontend:/app
      - ../data:/app/data
    ports:
      - "8080:8000"
    depends_on:
      - postgres
      - redis
      - gateway
    restart: unless-stopped

  # API Gateway Service
  gateway:
    build:
      context: ../services/gateway
      dockerfile: Dockerfile
    container_name: skynet-rc1-gateway
    environment:
      - DATABASE_URL=postgresql://skynet:${POSTGRES_PASSWORD}@postgres:5432/skynet_rc1
      - REDIS_URL=redis://redis:6379/1
      - DOCUMENT_SERVICE_URL=http://document:8000
      - AI_CHAT_SERVICE_URL=http://ai-chat:8000
      - QDRANT_URL=http://qdrant:6333
    ports:
      - "8000:8000"
    depends_on:
      - postgres
      - redis
      - qdrant
      - document
      - ai-chat
    restart: unless-stopped

  # Document Processing Service
  document:
    build:
      context: ../services/document
      dockerfile: Dockerfile
    container_name: skynet-rc1-document
    environment:
      - DATABASE_URL=postgresql://skynet:${POSTGRES_PASSWORD}@postgres:5432/skynet_rc1
      - REDIS_URL=redis://redis:6379/2
      - QDRANT_URL=http://qdrant:6333
      - OLLAMA_URL=http://ollama:11434
    volumes:
      - ../data:/app/data
    ports:
      - "8001:8000"
    depends_on:
      - postgres
      - redis
      - qdrant
    restart: unless-stopped

  # AI Chat Service
  ai-chat:
    build:
      context: ../services/ai-chat
      dockerfile: Dockerfile
    container_name: skynet-rc1-ai-chat
    environment:
      - DATABASE_URL=postgresql://skynet:${POSTGRES_PASSWORD}@postgres:5432/skynet_rc1
      - REDIS_URL=redis://redis:6379/3
      - QDRANT_URL=http://qdrant:6333
      - OLLAMA_URL=http://ollama:11434
      - OLLAMA_MODEL=${OLLAMA_MODEL}
    ports:
      - "8002:8000"
    depends_on:
      - postgres
      - redis
      - qdrant
      - ollama
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: skynet-rc1-nginx
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    ports:
      - "80:80"
    depends_on:
      - frontend
      - gateway
    restart: unless-stopped

volumes:
  qdrant_data:
  postgres_data:
  redis_data:
  ollama_data:

networks:
  default:
    name: skynet-rc1-network